{"version":3,"file":"component---src-pages-team-tsx-6a76fcada5e6ad9b8bde.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/general/cardGrid.tsx","webpack://my-gatsby-site/./src/components/navigation/layout.tsx","webpack://my-gatsby-site/./src/components/team/roleGroup.tsx","webpack://my-gatsby-site/./src/pages/team.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { devices } from 'styles/responsiveSizes';\nimport { primaryAccentColor } from 'styles/theme';\nimport { CardGridProps } from './cardGridInterface';\n\nconst StyledCardGrid = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 1em;\n  row-gap: 0.5em;\n\n  @media ${devices.laptopMin} {\n    max-width: 70%;\n    grid-template-columns: repeat(4, 1fr);\n    column-gap: 0;\n    row-gap: 1.2em;\n  }\n`;\n\nconst Card = styled.div`\n  /* background-color: ${primaryAccentColor};\n  border-radius: 10px; */\n  div {\n    a {\n      color: white;\n      transition: all 0.5s;\n      text-decoration: none;\n      :hover {\n        color: ${primaryAccentColor};\n      }\n    }\n    > p:nth-child(2) {\n      font-weight: 200;\n      font-style: italic;\n      color: ${primaryAccentColor};\n      font-size: clamp(0.7em, 1vw, 1.4em);\n    }\n  }\n\n  img {\n    width: 100%;\n    max-width: 30vw;\n    object-fit: cover;\n    height: 170px;\n    /* border-top-right-radius: 10px;\n    border-top-left-radius: 10px; */\n    background-color: black;\n  }\n\n  @media ${devices.laptopMin} {\n    transition: transform 0.3s;\n    max-width: 12vw;\n    :hover {\n      transform: translateY(-10px) scale(1.004);\n    }\n\n    img {\n      max-width: 100%;\n      height: 27vh;\n    }\n  }\n`;\n\nconst CardGrid: React.FC<CardGridProps> = ({ nodes, panelNodes }) => {\n  return (\n    <StyledCardGrid>\n      {nodes ? (\n        nodes?.map((i) => (\n          <Card key={i.id}>\n            <a href={i.data?.linkedInUrl as string}>\n              <img\n                src={\n                  i.data?.Attachments?.map(\n                    (image) => image?.thumbnails?.large?.url as string\n                  )[0]\n                }\n              />\n            </a>\n\n            <div>\n              <p>\n                <a href={i.data?.linkedInUrl as string}>{i.data?.Name}</a>\n              </p>\n              <p>{i.data?.Program}</p>\n            </div>\n          </Card>\n        ))\n      ) : panelNodes ? (\n        panelNodes?.map((i) => (\n          <Card key={i.id}>\n            <a href={i.data?.LinkedIn_Url as string}>\n              <img\n                src={\n                  i.data?.Attachments?.map(\n                    (image) => image?.thumbnails?.large?.url as string\n                  )[0]\n                }\n              />\n            </a>\n\n            <div>\n              <p>\n                <a href={i.data?.LinkedIn_Url as string}>{i.data?.Name}</a>\n              </p>\n              <p>\n                {i.data?.Title}, {i.data?.Organization}\n              </p>\n            </div>\n          </Card>\n        ))\n      ) : (\n        <div></div>\n      )}\n    </StyledCardGrid>\n  );\n};\n\nexport default CardGrid;\n","import React from 'react';\nimport NavBar from './navBar';\nimport mainTheme from 'styles/theme';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { GlobalStyle } from 'styles/globalStyles';\nimport { edgeSpace } from 'styles/theme';\nimport Footer from './footer';\nimport { devices } from 'styles/responsiveSizes';\n\n// const Body = styled.body`\n//   padding-left: ${edgePadding};\n//   padding-right: 10em;\n// `;\nconst Header = styled.header`\n  /* background-color: rebeccapurple; */\n  margin-top: ${edgeSpace + 'em'};\n  padding-left: ${edgeSpace * 2 + 'em'};\n  padding-right: ${edgeSpace * 2 + 'em'};\n  /* border-bottom: 1px solid rgba(255,255,255,.25); */\n  @media ${devices.mobileL} {\n    padding: 0;\n    margin: auto;\n    width: 70%;\n  }\n\n  div {\n    height: 1px;\n    width: 50%;\n    background-color: white;\n    @media ${devices.mobileL} {\n      width: 80%;\n    }\n  }\n`;\n\nexport const Section = styled.div`\n  margin-top: ${edgeSpace + 'em'};\n  padding-left: ${edgeSpace * 2 + 'em'};\n  padding-right: ${edgeSpace * 2 + 'em'};\n  @media ${devices.mobileL} {\n    padding: 0;\n    margin: auto;\n    width: 70%;\n    margin-top: 20px;\n  }\n`;\n\ninterface LayoutProps {\n  pageTitle: string;\n  children: React.ReactNode;\n  hideTitle?: boolean;\n  // : string;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ pageTitle, children, hideTitle }) => {\n  return (\n    <ThemeProvider theme={mainTheme}>\n      <GlobalStyle />\n      <title>SABF - {pageTitle}</title>\n      <div\n        style={{\n          height: '100%',\n          minHeight: '90vh'\n        }}\n      >\n        <NavBar></NavBar>\n        {hideTitle ? (\n          <></>\n        ) : (\n          <Header>\n            <h1>{pageTitle}</h1>\n            <div></div>\n          </Header>\n        )}\n        <Section>{children}</Section>\n      </div>\n      <Footer></Footer>\n    </ThemeProvider>\n  );\n};\n\nexport default Layout;\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { devices } from 'styles/responsiveSizes';\nimport '@fontsource/montserrat/200-italic.css';\nimport '@fontsource/montserrat/600.css';\nimport CardGrid from 'components/general/cardGrid';\n\ninterface RoleGroupProps {\n  groupTitle: string;\n  nodes: Array<{\n    id: string;\n    data?: {\n      Role?: string | null;\n      Name?: string | null;\n      Program?: string | null;\n      linkedInUrl?: string | null;\n      Attachments?: Array<{\n        thumbnails?: {\n          large?: {\n            height?: number | null;\n            width?: number | null;\n            url?: string | null;\n          } | null;\n        } | null;\n      } | null> | null;\n    } | null;\n  }>;\n}\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  h3 {\n    padding-bottom: 0.5em;\n    font-weight: 600;\n  }\n  margin-bottom: 1em;\n\n  @media ${devices.laptopMin} {\n    margin-bottom: 3em;\n    h3 {\n      font-size: 1.5em;\n      padding-bottom: 1em;\n      /* color: orange; */\n    }\n  }\n`;\n\nconst RoleGroup: React.FC<RoleGroupProps> = ({ groupTitle, nodes }) => {\n  return (\n    <Wrapper>\n      <h3>{groupTitle}</h3>\n      <CardGrid nodes={nodes}></CardGrid>\n    </Wrapper>\n  );\n};\nexport default RoleGroup;\n","import Layout from 'components/navigation/layout';\n\nimport RoleGroup from 'components/team/roleGroup';\nimport { graphql } from 'gatsby';\nimport React, { useLayoutEffect, useRef } from 'react';\nimport { TeamPageQueryQuery } from '../../graphql-types';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\n\n// TODO change to page query\n\ninterface TeamPageProps {\n  data: TeamPageQueryQuery;\n}\n\nconst TeamPage: React.FC<TeamPageProps> = ({ data }) => {\n  const groupRef = useRef();\n  // const groupSelector = gsap.utils.selector(groupRef);\n  // console.log(groupSelector);\n  useLayoutEffect(() => {\n    gsap.registerPlugin(ScrollTrigger);\n    const groupSelector = gsap.utils.selector(groupRef);\n\n    let revealContainers = groupSelector('.group');\n\n    console.log(revealContainers);\n    revealContainers.forEach((container) => {\n      let tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: container,\n          toggleActions: 'restart none none reset'\n        }\n      });\n\n      // tl.set(container, { autoAlpha: 1 });\n      tl.from(container, {\n        opacity: 0,\n        yPercent: -10,\n        duration: 1,\n        ease: 'power2.easeOut'\n      });\n    });\n  });\n  return (\n    <Layout pageTitle=\"Team\">\n      <div ref={groupRef}>\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Co-Presidents\"\n            nodes={data.leadership.nodes}\n          ></RoleGroup>\n        </div>\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Finance & Sponsorships Team\"\n            nodes={data.finance.nodes}\n          ></RoleGroup>{' '}\n        </div>\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Pitch Competition Team\"\n            nodes={data.pitch.nodes}\n          ></RoleGroup>\n        </div>{' '}\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Marketing Team\"\n            nodes={data.marketing.nodes}\n          ></RoleGroup>{' '}\n        </div>{' '}\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Content Team\"\n            nodes={data.speakers.nodes}\n          ></RoleGroup>{' '}\n        </div>{' '}\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Gala and After-Party Team\"\n            nodes={data.gala.nodes}\n          ></RoleGroup>{' '}\n        </div>{' '}\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Platform Team\"\n            nodes={data.platform.nodes}\n          ></RoleGroup>{' '}\n        </div>{' '}\n        <div className=\"group\">\n          <RoleGroup\n            groupTitle=\"Website Team\"\n            nodes={data.website.nodes}\n          ></RoleGroup>{' '}\n        </div>\n      </div>\n      {/* <GroupHolder data={data}></GroupHolder> */}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  fragment MemberData on Airtable {\n    data {\n      Role\n      Name\n      Program\n      linkedInUrl\n      Attachments {\n        thumbnails {\n          large {\n            height\n            width\n            url\n          }\n        }\n      }\n    }\n    id\n  }\n\n  query TeamPageQuery {\n    leadership: allAirtable(\n      filter: { data: { Role: { regex: \"/(President)/\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    marketing: allAirtable(\n      filter: { data: { Role: { regex: \"/(Marketing)/g\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    platform: allAirtable(\n      filter: { data: { Role: { regex: \"/(Platform|Website)/g\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    website: allAirtable(\n      filter: { data: { Role: { regex: \"/(Website)/g\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    finance: allAirtable(\n      filter: { data: { Role: { regex: \"/(Finance)/g\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    gala: allAirtable(\n      filter: { data: { Role: { regex: \"/(Gala)/g\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    speakers: allAirtable(\n      filter: { data: { Role: { regex: \"/(Keynotes|Panel)/\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n    pitch: allAirtable(\n      filter: { data: { Role: { regex: \"/(Pitch)/\" } } }\n      sort: { fields: [data___Lead], order: ASC }\n    ) {\n      nodes {\n        ...MemberData\n      }\n    }\n  }\n`;\n\nexport default TeamPage;\n"],"names":["StyledCardGrid","styled","devices","Card","primaryAccentColor","nodes","panelNodes","map","i","key","id","href","data","linkedInUrl","src","Attachments","image","thumbnails","large","url","Name","Program","LinkedIn_Url","Title","Organization","Header","edgeSpace","Section","pageTitle","children","hideTitle","ThemeProvider","theme","mainTheme","style","height","minHeight","Wrapper","groupTitle","groupRef","useRef","useLayoutEffect","gsap","ScrollTrigger","revealContainers","groupSelector","console","log","forEach","container","scrollTrigger","trigger","toggleActions","from","opacity","yPercent","duration","ease","ref","className","leadership","finance","pitch","marketing","speakers","gala","platform","website"],"sourceRoot":""}